name: Blue-Green Deploy to DigitalOcean

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches:
      - main
      - staging
      - deployment
    paths:
      - 'backend/**'
      - 'frontend/admin/**'
      - 'frontend/public/**'
      - '.github/workflows/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine current active environment
        id: get_active_color
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          script: |
            set -e
            cd app
            
            # Check which nginx container is currently running
            if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "nginx_blue.*Up"; then
              echo "ACTIVE_COLOR=blue"
              echo "INACTIVE_COLOR=green"
              echo "Blue nginx is currently active"
            elif docker ps --format "table {{.Names}}	{{.Status}}" | grep -q "nginx_green.*Up"; then
              echo "ACTIVE_COLOR=green"
              echo "INACTIVE_COLOR=blue" 
              echo "Green nginx is currently active"
            else
              # No nginx running, default to blue as inactive (so we deploy green first)
              echo "ACTIVE_COLOR=blue"
              echo "INACTIVE_COLOR=green"
              echo "No nginx found running, defaulting to deploy green environment"
            fi

      - name: Set environment variables
        run: |
          # Extract colors from SSH output
          ACTIVE_COLOR=$(echo '${{ steps.get_active_color.outputs.stdout }}' | grep "ACTIVE_COLOR=" | cut -d'=' -f2 | tr -d '\r\n')
          INACTIVE_COLOR=$(echo '${{ steps.get_active_color.outputs.stdout }}' | grep "INACTIVE_COLOR=" | cut -d'=' -f2 | tr -d '\r\n')
          
          # Set defaults if extraction failed
          if [ -z "$ACTIVE_COLOR" ]; then
            ACTIVE_COLOR="blue"
            INACTIVE_COLOR="green"
          fi
          
          echo "ACTIVE_COLOR=$ACTIVE_COLOR" >> $GITHUB_ENV
          echo "INACTIVE_COLOR=$INACTIVE_COLOR" >> $GITHUB_ENV
          
          echo "🔵 Active environment: $ACTIVE_COLOR"
          echo "🟢 Deploying to: $INACTIVE_COLOR"

      - name: Clean up Docker system
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          script: |
            set -e
            echo "🧹 Cleaning up Docker system..."
            docker system prune -a --volumes -f
            echo "✅ Docker system cleanup complete."

      - name: Create environment files on server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 10m
          script: |
            set -e
            cd app
            mkdir -p envs
            
            # Clear existing env files to ensure clean state
            rm -f envs/prod.*.env

            # Create nginx.env (not used in your setup but keeping for compatibility) 
            cat > envs/prod.nginx.env << EOF
            FRONTEND_PUBLIC_HOST=${{ secrets.FRONTEND_PUBLIC_HOST }}
            FRONTEND_PUBLIC_PORT=${{ secrets.FRONTEND_PUBLIC_PORT }}
            FRONTEND_ADMIN_HOST=${{ secrets.FRONTEND_ADMIN_HOST }}
            FRONTEND_ADMIN_PORT=${{ secrets.FRONTEND_ADMIN_PORT }}
            BACKEND_HOST=${{ secrets.BACKEND_HOST }}
            BACKEND_PORT=${{ secrets.BACKEND_PORT }}
            EOF

            # Create backend.env
            cat > envs/prod.backend.env << EOF
            CI=${{ secrets.CI }}
            MAILTRAP_TOKEN=${{ secrets.MAILTRAP_TOKEN }}
            MAILTRAP_TESTINBOX_ID=${{ secrets.MAILTRAP_TESTINBOX_ID }}
            MAILTRAP_SEND_EMAIL_API=${{ secrets.MAILTRAP_SEND_EMAIL_API }}
            PORT=${{ secrets.PORT }}
            APP_NAME_BACKEND=${{ secrets.APP_NAME_BACKEND }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            APP_SESSION_SECRET=${{ secrets.APP_SESSION_SECRET }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            FRONTEND_PUBLIC=${{ secrets.FRONTEND_PUBLIC }}
            FRONTEND_ADMIN=${{ secrets.FRONTEND_ADMIN }}
            BACKEND=${{ secrets.BACKEND }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
            ETHEREUM_NETWORK_URL=${{ secrets.ETHEREUM_NETWORK_URL }}
            ETHEREUM_ESCROW_ADDRESS=${{ secrets.ETHEREUM_ESCROW_ADDRESS }}
            ETHEREUM_ESCROW_PRIVATE_KEY=${{ secrets.ETHEREUM_ESCROW_PRIVATE_KEY }}
            ETHEREUM_ESCROW_CONTRACT_ADDRESS=${{ secrets.ETHEREUM_ESCROW_CONTRACT_ADDRESS }}
            ETHEREUM_ESCROW_ARBITRATOR_ADDRESS=${{ secrets.ETHEREUM_ESCROW_ARBITRATOR_ADDRESS }}
            ETHEREUM_DEPLOYER_ADDRESS=${{ secrets.ETHEREUM_DEPLOYER_ADDRESS }}
            ETHEREUM_DEPLOYER_PRIVATE_KEY=${{ secrets.ETHEREUM_DEPLOYER_PRIVATE_KEY }}
            ALTCHA_HMAC_SECRET_KEY=${{ secrets.ALTCHA_HMAC_SECRET_KEY }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN_BACKEND }}
            EOF

            # Create other environment files
            cat > envs/prod.base-ca.env << EOF
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            EOF

            cat > envs/prod.frontend-admin.env << EOF
            NEXT_PUBLIC_APP_NAME_FRONTEND_ADMIN=${{ secrets.NEXT_PUBLIC_APP_NAME_FRONTEND_ADMIN }}
            NEXT_PUBLIC_FRONTEND_PUBLIC=${{ secrets.NEXT_PUBLIC_FRONTEND_PUBLIC }}
            NEXT_PUBLIC_FRONTEND_ADMIN=${{ secrets.NEXT_PUBLIC_FRONTEND_ADMIN }}
            NEXT_PUBLIC_BACKEND=${{ secrets.NEXT_PUBLIC_BACKEND }}
            CI=${{ secrets.CI }}
            EOF

            cat > envs/prod.frontend-public.env << EOF
            NEXT_PUBLIC_APP_NAME_FRONTEND_PUBLIC=${{ secrets.NEXT_PUBLIC_APP_NAME_FRONTEND_PUBLIC }}
            NEXT_PUBLIC_FRONTEND_PUBLIC=${{ secrets.NEXT_PUBLIC_FRONTEND_PUBLIC }}
            NEXT_PUBLIC_FRONTEND_ADMIN=${{ secrets.NEXT_PUBLIC_FRONTEND_ADMIN }}
            NEXT_PUBLIC_BACKEND=${{ secrets.NEXT_PUBLIC_BACKEND }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN_FRONTEND_PUBLIC }}
            CI=${{ secrets.CI }}
            GA_ID=${{ secrets.GA_ID }}
            EOF

            cat > envs/prod.mongodb.env << EOF
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            EOF

            cat > envs/prod.postgres.env << EOF
            POSTGRES_VOLUME=${{ secrets.POSTGRES_VOLUME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            EOF

            cat > envs/prod.redis.env << EOF
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            EOF

            cat > envs/prod.rabbitmq.env << EOF
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
            EOF

            echo "✅ Environment files created successfully"

      - name: Deploy shared services (databases and message queue)
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 15m
          script: |
            set -e
            cd app
            
            echo "🗄️ Deploying shared services (MongoDB, PostgreSQL, Redis, RabbitMQ)..."
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/main
            
            # Pull latest images for shared services
            docker compose -f prod.docker-compose.yml pull redis mongodb postgres rabbitmq
            
            # Deploy shared services (these don't have profiles so they start without profile specification)
            docker compose -f prod.docker-compose.yml up -d redis mongodb postgres rabbitmq
            
            echo "✅ Shared services deployed"
            
            # Wait for databases to be ready
            echo "⏳ Waiting for databases to be ready..."
            
            # Wait for PostgreSQL to be healthy
            echo "Waiting for PostgreSQL..."
            timeout=300  # 5 minutes
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f prod.docker-compose.yml exec -T postgres pg_isready -U ${{ secrets.POSTGRES_USER }} > /dev/null 2>&1; then
                echo "✅ PostgreSQL is ready"
                break
              fi
              sleep 5
              elapsed=$((elapsed + 5))
            done
            
            # Wait for MongoDB to be ready
            echo "Waiting for MongoDB..."
            timeout=300  # 5 minutes
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f prod.docker-compose.yml exec -T mongodb mongosh --eval "db.runCommand('ping')" > /dev/null 2>&1; then
                echo "✅ MongoDB is ready"
                break
              fi
              sleep 5
              elapsed=$((elapsed + 5))
            done
            
            # Wait for Redis to be ready
            echo "Waiting for Redis..."
            timeout=300  # 5 minutes
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f prod.docker-compose.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
                echo "✅ Redis is ready"
                break
              fi
              sleep 5
              elapsed=$((elapsed + 5))
            done
            
            # Wait for RabbitMQ to be ready
            echo "Waiting for RabbitMQ..."
            sleep 30  # RabbitMQ typically takes a bit longer to start
            
            echo "✅ All shared services are ready"

      - name: Deploy to inactive environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 30m
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            cd app
            
            echo "🚀 Starting deployment to ${{ env.INACTIVE_COLOR }} environment"
            
            # Pull latest images for application services
            docker compose -f prod.docker-compose.yml pull
            
            # Deploy inactive environment (this will include the shared services that are already running)
            echo "🔧 Deploying ${{ env.INACTIVE_COLOR }} environment..."
            docker compose -f prod.docker-compose.yml --profile ${{ env.INACTIVE_COLOR }} up -d --build --remove-orphans
            
            echo "✅ ${{ env.INACTIVE_COLOR }} environment deployed"

      #   uses: appleboy/ssh-action@v1.2.2
      #   with:
      #     host: ${{ secrets.DIGITAL_OCEAN_HOST }}
      #     username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
      #     key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
      #     command_timeout: 15m
      #     script: |
      #       cd app
            
      #       echo "🏥 Starting health checks for ${{ env.INACTIVE_COLOR }} environment..."
            
      #       # Wait for containers to start
      #       sleep 30
            
      #       # Function to check container health
      #       check_health() {
      #         local max_attempts=30
      #         local attempt=1
              
      #         while [ $attempt -le $max_attempts ]; do
      #           echo "Health check attempt $attempt/$max_attempts..."
                
      #           # Check shared services first
      #           local shared_services=("redis" "mongodb" "postgres" "rabbitmq")
      #           local app_containers=("backend_${{ env.INACTIVE_COLOR }}" "public_${{ env.INACTIVE_COLOR }}" "admin_${{ env.INACTIVE_COLOR }}")
      #           local all_services=("${shared_services[@]}" "${app_containers[@]}")
      #           local all_healthy=true
                
      #           for container in "${all_services[@]}"; do
      #             if docker ps --format "table {{.Names}}	{{.Status}}" | grep -q "$container.*Up"; then
      #               local health_status=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}no-health-check{{end}}' "$container" 2>/dev/null || echo "not-found")
      #               echo "localHealth=$health_status"

      #               if [ "$health_status" = "healthy" ] || [ "$health_status" = "no-health-check" ]; then
      #                 echo "✅ $container is healthy"
      #               else
      #                 echo "⏳ $container status: $health_status"
      #                 all_healthy=false
      #               fi
      #             else
      #               echo "❌ $container is not running"
      #               all_healthy=false
      #             fi
      #           done
                
      #           if [ "$all_healthy" = true ]; then
      #             echo "🎉 All services and ${{ env.INACTIVE_COLOR }} containers are healthy!"
      #             return 0
      #           fi
                
      #           sleep 10
      #           attempt=$((attempt + 1))
      #         done
              
      #         echo "❌ Health check timeout after $max_attempts attempts"
      #         exit 1


      - name: Switch traffic to new environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 5m
          script: |
            set -e
            cd app
            
            echo "🔄 Switching traffic from ${{ env.ACTIVE_COLOR }} to ${{ env.INACTIVE_COLOR }}..."
            
            # Start the new nginx container for the inactive environment
            echo "Starting nginx_${{ env.INACTIVE_COLOR }}..."
            docker compose -f prod.docker-compose.yml --profile ${{ env.INACTIVE_COLOR }} up -d nginx_${{ env.INACTIVE_COLOR }}
            
            # Wait a moment for nginx to start
            sleep 10
            
            # Verify the new nginx is running
            if docker ps --format "table {{.Names}}	{{.Status}}" | grep -q "nginx_${{ env.INACTIVE_COLOR }}.*Up"; then
              echo "✅ nginx_${{ env.INACTIVE_COLOR }} is now running"
              
              # Stop the old nginx container
              echo "Stopping nginx_${{ env.ACTIVE_COLOR }}..."
              docker compose -f prod.docker-compose.yml stop nginx_${{ env.ACTIVE_COLOR }}
              
              echo "✅ Traffic successfully switched to ${{ env.INACTIVE_COLOR }} environment"
            else
              echo "❌ Failed to start nginx_${{ env.INACTIVE_COLOR }}"
              exit 1
            fi

      - name: Cleanup old environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 10m
          script: |
            set -e
            cd app
            
            echo "🧹 Cleaning up old ${{ env.ACTIVE_COLOR }} environment..."
            
            # Stop old environment containers (but keep shared services running)
            # Only stop the application containers, not the shared services
            docker compose -f prod.docker-compose.yml stop backend_${{ env.ACTIVE_COLOR }}
            docker compose -f prod.docker-compose.yml stop public_${{ env.ACTIVE_COLOR }}
            docker compose -f prod.docker-compose.yml stop admin_${{ env.ACTIVE_COLOR }}
            docker compose -f prod.docker-compose.yml stop nginx_${{ env.ACTIVE_COLOR }}
            
            # Remove old containers (but keep shared services)
            docker compose -f prod.docker-compose.yml rm -f backend_${{ env.ACTIVE_COLOR }}
            docker compose -f prod.docker-compose.yml rm -f public_${{ env.ACTIVE_COLOR }}
            docker compose -f prod.docker-compose.yml rm -f admin_${{ env.ACTIVE_COLOR }}
            docker compose -f prod.docker-compose.yml rm -f nginx_${{ env.ACTIVE_COLOR }}
            
            # Clean up unused images (but be careful not to remove images that are in use)
            docker image prune -f
            
            echo "✅ Cleanup completed (shared services preserved)"

      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Active Environment:** ${{ env.ACTIVE_COLOR }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Active Environment:** ${{ env.INACTIVE_COLOR }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Shared Services:** MongoDB, PostgreSQL, Redis, RabbitMQ ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The application has been successfully deployed using blue-green deployment strategy with shared database services." >> $GITHUB_STEP_SUMMARY
