name: Deploy to DigitalOcean

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches:
      - main
      - staging
      - deployment
    paths:
      - 'backend/**'
      - 'frontend/admin/**'
      - 'frontend/public/**'
      - '.github/workflows/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean up Docker system
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          script: |
            set -e
            echo "ðŸ§¹ Cleaning up Docker system..."
            docker system prune -a --volumes -f
            echo "âœ… Docker system cleanup complete."

      - name: Create environment files on server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 10m
          script: |
            set -e
            cd app
            mkdir -p envs
            
            # Clear existing env files to ensure clean state
            rm -f envs/prod.*.env

            # Create nginx.env (not used in your setup but keeping for compatibility) 
            cat > envs/prod.nginx.env << EOF
            FRONTEND_PUBLIC_HOST=${{ secrets.FRONTEND_PUBLIC_HOST }}
            FRONTEND_PUBLIC_PORT=${{ secrets.FRONTEND_PUBLIC_PORT }}
            FRONTEND_ADMIN_HOST=${{ secrets.FRONTEND_ADMIN_HOST }}
            FRONTEND_ADMIN_PORT=${{ secrets.FRONTEND_ADMIN_PORT }}
            BACKEND_HOST=${{ secrets.BACKEND_HOST }}
            BACKEND_PORT=${{ secrets.BACKEND_PORT }}
            EOF

            # Create backend.env
            cat > envs/prod.backend.env << EOF
            CI=${{ secrets.CI }}
            MAILTRAP_TOKEN=${{ secrets.MAILTRAP_TOKEN }}
            MAILTRAP_TESTINBOX_ID=${{ secrets.MAILTRAP_TESTINBOX_ID }}
            MAILTRAP_SEND_EMAIL_API=${{ secrets.MAILTRAP_SEND_EMAIL_API }}
            PORT=${{ secrets.PORT }}
            APP_NAME_BACKEND=${{ secrets.APP_NAME_BACKEND }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            APP_SESSION_SECRET=${{ secrets.APP_SESSION_SECRET }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            FRONTEND_PUBLIC=${{ secrets.FRONTEND_PUBLIC }}
            FRONTEND_ADMIN=${{ secrets.FRONTEND_ADMIN }}
            BACKEND=${{ secrets.BACKEND }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
            ETHEREUM_NETWORK_URL=${{ secrets.ETHEREUM_NETWORK_URL }}
            ETHEREUM_ESCROW_ADDRESS=${{ secrets.ETHEREUM_ESCROW_ADDRESS }}
            ETHEREUM_ESCROW_PRIVATE_KEY=${{ secrets.ETHEREUM_ESCROW_PRIVATE_KEY }}
            ETHEREUM_ESCROW_CONTRACT_ADDRESS=${{ secrets.ETHEREUM_ESCROW_CONTRACT_ADDRESS }}
            ETHEREUM_ESCROW_ARBITRATOR_ADDRESS=${{ secrets.ETHEREUM_ESCROW_ARBITRATOR_ADDRESS }}
            ETHEREUM_DEPLOYER_ADDRESS=${{ secrets.ETHEREUM_DEPLOYER_ADDRESS }}
            ETHEREUM_DEPLOYER_PRIVATE_KEY=${{ secrets.ETHEREUM_DEPLOYER_PRIVATE_KEY }}
            ALTCHA_HMAC_SECRET_KEY=${{ secrets.ALTCHA_HMAC_SECRET_KEY }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN_BACKEND }}
            EOF

            # Create other environment files
            cat > envs/prod.base-ca.env << EOF
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            EOF

            cat > envs/prod.frontend-admin.env << EOF
            NEXT_PUBLIC_APP_NAME_FRONTEND_ADMIN=${{ secrets.NEXT_PUBLIC_APP_NAME_FRONTEND_ADMIN }}
            NEXT_PUBLIC_FRONTEND_PUBLIC=${{ secrets.NEXT_PUBLIC_FRONTEND_PUBLIC }}
            NEXT_PUBLIC_FRONTEND_ADMIN=${{ secrets.NEXT_PUBLIC_FRONTEND_ADMIN }}
            NEXT_PUBLIC_BACKEND=${{ secrets.NEXT_PUBLIC_BACKEND }}
            CI=${{ secrets.CI }}
            EOF

            cat > envs/prod.frontend-public.env << EOF
            NEXT_PUBLIC_APP_NAME_FRONTEND_PUBLIC=${{ secrets.NEXT_PUBLIC_APP_NAME_FRONTEND_PUBLIC }}
            NEXT_PUBLIC_FRONTEND_PUBLIC=${{ secrets.NEXT_PUBLIC_FRONTEND_PUBLIC }}
            NEXT_PUBLIC_FRONTEND_ADMIN=${{ secrets.NEXT_PUBLIC_FRONTEND_ADMIN }}
            NEXT_PUBLIC_BACKEND=${{ secrets.NEXT_PUBLIC_BACKEND }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN_FRONTEND_PUBLIC }}
            CI=${{ secrets.CI }}
            GA_ID=${{ secrets.GA_ID }}
            EOF

            cat > envs/prod.mongodb.env << EOF
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            EOF

            cat > envs/prod.postgres.env << EOF
            POSTGRES_VOLUME=${{ secrets.POSTGRES_VOLUME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            EOF

            cat > envs/prod.redis.env << EOF
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            EOF

            cat > envs/prod.rabbitmq.env << EOF
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
            EOF

            echo "âœ… Environment files created successfully"

      - name: Deploy application
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          command_timeout: 120m
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            cd app
            
            echo "ðŸš€ Starting deployment"
            
            # Pull latest images for application services
            docker compose -f prod.docker-compose.yml pull
            
            # Deploy all services
            echo "ðŸ”§ Deploying all services..."
            docker compose -f prod.docker-compose.yml up -d --build --remove-orphans
            
            echo "âœ… Deployment complete"

      - name: Deployment summary
        run: |
          echo "## ðŸŽ‰ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Status:** âœ… Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The application has been successfully deployed." >> $GITHUB_STEP_SUMMARY

          