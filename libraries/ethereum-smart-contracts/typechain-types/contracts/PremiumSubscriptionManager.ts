/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PremiumSubscriptionManager {
  export type SubscriptionStruct = {
    isActive: boolean;
    expiryTimestamp: BigNumberish;
    planType: BigNumberish;
    lastPaymentAmount: BigNumberish;
    lastPaymentHash: BytesLike;
    paymentCount: BigNumberish;
  };

  export type SubscriptionStructOutput = [
    isActive: boolean,
    expiryTimestamp: bigint,
    planType: bigint,
    lastPaymentAmount: bigint,
    lastPaymentHash: string,
    paymentCount: bigint
  ] & {
    isActive: boolean;
    expiryTimestamp: bigint;
    planType: bigint;
    lastPaymentAmount: bigint;
    lastPaymentHash: string;
    paymentCount: bigint;
  };
}

export interface PremiumSubscriptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SECONDS_IN_MONTH"
      | "SECONDS_IN_YEAR"
      | "deactivateSubscription"
      | "extendSubscription"
      | "getContractBalance"
      | "getPaymentHash"
      | "getPlatformWallet"
      | "getSubscriptionDetails"
      | "getSubscriptionPrice"
      | "getTimeRemaining"
      | "hasSubscriptionHistory"
      | "isSubscriptionActive"
      | "owner"
      | "pauseSubscriptions"
      | "paymentToken"
      | "platformWallet"
      | "renewSubscription"
      | "renounceOwnership"
      | "subscribe"
      | "subscriptionPrices"
      | "subscriptions"
      | "transferOwnership"
      | "updatePaymentToken"
      | "updatePlatformWallet"
      | "updatePrice"
      | "usedPaymentHashes"
      | "verifyPaymentHash"
      | "withdrawAllPayments"
      | "withdrawPayments"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PaymentTokenUpdated"
      | "PlatformWalletUpdated"
      | "PriceUpdated"
      | "SubscriptionActivated"
      | "SubscriptionRenewed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SECONDS_IN_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_IN_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateSubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extendSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscriptionHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseSubscriptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedPaymentHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPaymentHash",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllPayments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SECONDS_IN_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_IN_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscriptionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedPaymentHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPaymentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [newToken: AddressLike];
  export type OutputTuple = [newToken: string];
  export interface OutputObject {
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformWalletUpdatedEvent {
  export type InputTuple = [newPlatformWallet: AddressLike];
  export type OutputTuple = [newPlatformWallet: string];
  export interface OutputObject {
    newPlatformWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [planType: BigNumberish, newPrice: BigNumberish];
  export type OutputTuple = [planType: bigint, newPrice: bigint];
  export interface OutputObject {
    planType: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionActivatedEvent {
  export type InputTuple = [
    user: AddressLike,
    planType: BigNumberish,
    expiryTimestamp: BigNumberish,
    paymentHash: BytesLike
  ];
  export type OutputTuple = [
    user: string,
    planType: bigint,
    expiryTimestamp: bigint,
    paymentHash: string
  ];
  export interface OutputObject {
    user: string;
    planType: bigint;
    expiryTimestamp: bigint;
    paymentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionRenewedEvent {
  export type InputTuple = [
    user: AddressLike,
    planType: BigNumberish,
    newExpiryTimestamp: BigNumberish,
    paymentHash: BytesLike
  ];
  export type OutputTuple = [
    user: string,
    planType: bigint,
    newExpiryTimestamp: bigint,
    paymentHash: string
  ];
  export interface OutputObject {
    user: string;
    planType: bigint;
    newExpiryTimestamp: bigint;
    paymentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PremiumSubscriptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): PremiumSubscriptionManager;
  waitForDeployment(): Promise<this>;

  interface: PremiumSubscriptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SECONDS_IN_MONTH: TypedContractMethod<[], [bigint], "view">;

  SECONDS_IN_YEAR: TypedContractMethod<[], [bigint], "view">;

  deactivateSubscription: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  extendSubscription: TypedContractMethod<
    [user: AddressLike, additionalTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getPaymentHash: TypedContractMethod<[user: AddressLike], [string], "view">;

  getPlatformWallet: TypedContractMethod<[], [string], "view">;

  getSubscriptionDetails: TypedContractMethod<
    [user: AddressLike],
    [PremiumSubscriptionManager.SubscriptionStructOutput],
    "view"
  >;

  getSubscriptionPrice: TypedContractMethod<
    [planType: BigNumberish],
    [bigint],
    "view"
  >;

  getTimeRemaining: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  hasSubscriptionHistory: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  isSubscriptionActive: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pauseSubscriptions: TypedContractMethod<[], [void], "nonpayable">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  renewSubscription: TypedContractMethod<
    [planType: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  subscribe: TypedContractMethod<
    [planType: BigNumberish],
    [void],
    "nonpayable"
  >;

  subscriptionPrices: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  subscriptions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, string, bigint] & {
        isActive: boolean;
        expiryTimestamp: bigint;
        planType: bigint;
        lastPaymentAmount: bigint;
        lastPaymentHash: string;
        paymentCount: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePaymentToken: TypedContractMethod<
    [newToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformWallet: TypedContractMethod<
    [newPlatformWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [planType: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  usedPaymentHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifyPaymentHash: TypedContractMethod<
    [user: AddressLike, paymentHash: BytesLike],
    [boolean],
    "view"
  >;

  withdrawAllPayments: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPayments: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SECONDS_IN_MONTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_IN_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deactivateSubscription"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "extendSubscription"
  ): TypedContractMethod<
    [user: AddressLike, additionalTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPaymentHash"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getPlatformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSubscriptionDetails"
  ): TypedContractMethod<
    [user: AddressLike],
    [PremiumSubscriptionManager.SubscriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionPrice"
  ): TypedContractMethod<[planType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasSubscriptionHistory"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSubscriptionActive"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseSubscriptions"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renewSubscription"
  ): TypedContractMethod<[planType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[planType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionPrices"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, string, bigint] & {
        isActive: boolean;
        expiryTimestamp: bigint;
        planType: bigint;
        lastPaymentAmount: bigint;
        lastPaymentHash: string;
        paymentCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePaymentToken"
  ): TypedContractMethod<[newToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformWallet"
  ): TypedContractMethod<
    [newPlatformWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [planType: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedPaymentHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyPaymentHash"
  ): TypedContractMethod<
    [user: AddressLike, paymentHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawAllPayments"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPayments"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformWalletUpdated"
  ): TypedContractEvent<
    PlatformWalletUpdatedEvent.InputTuple,
    PlatformWalletUpdatedEvent.OutputTuple,
    PlatformWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionActivated"
  ): TypedContractEvent<
    SubscriptionActivatedEvent.InputTuple,
    SubscriptionActivatedEvent.OutputTuple,
    SubscriptionActivatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionRenewed"
  ): TypedContractEvent<
    SubscriptionRenewedEvent.InputTuple,
    SubscriptionRenewedEvent.OutputTuple,
    SubscriptionRenewedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentTokenUpdated(address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "PlatformWalletUpdated(address)": TypedContractEvent<
      PlatformWalletUpdatedEvent.InputTuple,
      PlatformWalletUpdatedEvent.OutputTuple,
      PlatformWalletUpdatedEvent.OutputObject
    >;
    PlatformWalletUpdated: TypedContractEvent<
      PlatformWalletUpdatedEvent.InputTuple,
      PlatformWalletUpdatedEvent.OutputTuple,
      PlatformWalletUpdatedEvent.OutputObject
    >;

    "PriceUpdated(uint8,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "SubscriptionActivated(address,uint8,uint256,bytes32)": TypedContractEvent<
      SubscriptionActivatedEvent.InputTuple,
      SubscriptionActivatedEvent.OutputTuple,
      SubscriptionActivatedEvent.OutputObject
    >;
    SubscriptionActivated: TypedContractEvent<
      SubscriptionActivatedEvent.InputTuple,
      SubscriptionActivatedEvent.OutputTuple,
      SubscriptionActivatedEvent.OutputObject
    >;

    "SubscriptionRenewed(address,uint8,uint256,bytes32)": TypedContractEvent<
      SubscriptionRenewedEvent.InputTuple,
      SubscriptionRenewedEvent.OutputTuple,
      SubscriptionRenewedEvent.OutputObject
    >;
    SubscriptionRenewed: TypedContractEvent<
      SubscriptionRenewedEvent.InputTuple,
      SubscriptionRenewedEvent.OutputTuple,
      SubscriptionRenewedEvent.OutputObject
    >;
  };
}
