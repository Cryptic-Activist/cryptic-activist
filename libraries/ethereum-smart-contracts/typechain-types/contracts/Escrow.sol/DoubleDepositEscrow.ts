/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DoubleDepositEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "buyer"
      | "buyerDeposited"
      | "buyer_deposit"
      | "depositAmount"
      | "isApproved"
      | "paymentAmount"
      | "seller"
      | "sellerDeposited"
      | "seller_deposit"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "approve", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyerDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyer_deposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellerDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seller_deposit",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyer_deposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seller_deposit",
    data: BytesLike
  ): Result;
}

export interface DoubleDepositEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): DoubleDepositEscrow;
  waitForDeployment(): Promise<this>;

  interface: DoubleDepositEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<[], [void], "nonpayable">;

  buyer: TypedContractMethod<[], [string], "view">;

  buyerDeposited: TypedContractMethod<[], [boolean], "view">;

  buyer_deposit: TypedContractMethod<[], [void], "payable">;

  depositAmount: TypedContractMethod<[], [bigint], "view">;

  isApproved: TypedContractMethod<[], [boolean], "view">;

  paymentAmount: TypedContractMethod<[], [bigint], "view">;

  seller: TypedContractMethod<[], [string], "view">;

  sellerDeposited: TypedContractMethod<[], [boolean], "view">;

  seller_deposit: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyerDeposited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "buyer_deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApproved"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sellerDeposited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "seller_deposit"
  ): TypedContractMethod<[], [void], "payable">;

  filters: {};
}
