// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String    @id @default(uuid())
  firstName  String    @db.VarChar(50)
  lastName   String    @db.VarChar(50)
  username   String    @unique @db.VarChar(120)
  password   String
  isVerified Boolean?  @default(false) @db.Boolean
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date

  @@map("admins")
}

model User {
  id                       String                     @id @default(uuid())
  profileColor             String                     @db.VarChar(10)
  firstName                String                     @db.VarChar(50)
  lastName                 String                     @db.VarChar(50)
  username                 String                     @unique @db.VarChar(120)
  password                 String
  privateKeys              String[]                   @unique
  isVerified               Boolean?                   @default(false) @db.Boolean
  isDeleted                Boolean?                   @default(false) @db.Boolean
  whenDelete               DateTime?                  @db.Date
  createdAt                DateTime?                  @default(now()) @db.Date
  updatedAt                DateTime?                  @updatedAt @db.Date
  userLanguage             UserLanguage[]
  systemMessages           SystemMessage[]
  trusters                 Trust[]                    @relation("trusters")
  trusted                  Trust[]                    @relation("trusted")
  blockers                 Block[]                    @relation("blockers")
  blocked                  Block[]                    @relation("blocked")
  offers                   Offer[]                    @relation("offer")
  feedbacksVendor          Feedback[]                 @relation("feedbackVendor")
  feedbackTrader           Feedback[]                 @relation("feedbackTrader")
  tradeVendor              Trade[]                    @relation("vendorTrade")
  tradeTrader              Trade[]                    @relation("traderTrade")
  tier                     Tier?                      @relation(fields: [tierId], references: [id])
  tierId                   String?
  premiumPurchase          PremiumPurchase?
  kyc                      KYC?
  kycId                    String?
  TransactionPaymentMethod TransactionPaymentMethod[]
  Transaction              Transaction[]
  Transaction              Transaction[]

  @@map("users")
}

model Language {
  id           String         @id @default(uuid())
  name         String         @unique @db.VarChar(50)
  isDeleted    Boolean?       @default(false) @db.Boolean
  whenDelete   DateTime?      @db.Date
  createdAt    DateTime?      @default(now()) @db.Date
  updatedAt    DateTime?      @updatedAt @db.Date
  UserLanguage UserLanguage[]

  @@map("languages")
}

model UserLanguage {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String   @default(uuid())
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId String   @default(uuid())

  @@id([userId, languageId])
  @@map("user_languages")
}

model Chat {
  id         String    @id @default(uuid())
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date
  trade      Trade     @relation(fields: [tradeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tradeId    String    @unique

  @@map("chats")
}

model SystemMessage {
  id         String    @id @default(uuid())
  message    String    @db.VarChar(256)
  whenSeen   DateTime?
  url        String
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String

  @@map("system_messages")
}

model PaymentMethodCategory {
  id             String          @id @default(uuid())
  name           String          @db.VarChar(60)
  isDeleted      Boolean?        @default(false) @db.Boolean
  whenDelete     DateTime?       @db.Date
  createdAt      DateTime?       @default(now()) @db.Date
  updatedAt      DateTime?       @updatedAt @db.Date
  paymentMethods PaymentMethod[]

  @@map("payment_method_categories")
}

model PaymentMethod {
  id                      String                @id @default(uuid())
  name                    String                @db.VarChar(60)
  isDeleted               Boolean?              @default(false) @db.Boolean
  whenDelete              DateTime?             @db.Date
  createdAt               DateTime?             @default(now()) @db.Date
  updatedAt               DateTime?             @updatedAt @db.Date
  paymentMethodCategory   PaymentMethodCategory @relation(fields: [paymentMethodCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  paymentMethodCategoryId String                @default(uuid())
  offers                  Offer[]               @relation("offer")

  @@map("payment_methods")
}

model PaymentReceipt {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(60)
  key        String
  url        String
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date

  @@map("payment_receipts")
}

model Trust {
  id         String    @id @default(uuid())
  truster    User      @relation("trusters", fields: [trusterId], references: [id], onDelete: Cascade, onUpdate: Cascade) // User who trusts
  trusterId  String    @default(uuid())
  trusted    User      @relation("trusted", fields: [trustedId], references: [id], onDelete: Cascade, onUpdate: Cascade) // User who is trusted
  trustedId  String    @default(uuid())
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date

  @@map("trusts")
}

model Block {
  id         String    @id @default(uuid())
  blocker    User      @relation("blockers", fields: [blockerId], references: [id], onDelete: Cascade, onUpdate: Cascade) // User who blocks 
  blockerId  String
  blockedId  String
  blocked    User      @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade, onUpdate: Cascade) // User who is blocked
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date

  @@map("blocks")
}

model Cryptocurrency {
  id          String    @id @default(uuid())
  coingeckoId String    @unique @db.VarChar(200)
  symbol      String    @db.VarChar(200)
  name        String    @db.VarChar(200)
  image       String
  isDeleted   Boolean?  @default(false) @db.Boolean
  whenDelete  DateTime? @db.Date
  createdAt   DateTime? @default(now()) @db.Date
  updatedAt   DateTime? @updatedAt @db.Date
  offers      Offer[]   @relation("offer")
  trades      Trade[]   @relation("trade")

  @@map("cryptocurrencies")
}

model Fiat {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(30)
  symbol     String    @db.VarChar(10)
  country    String    @db.VarChar(100)
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date
  offers     Offer[]   @relation("offer")
  trades     Trade[]   @relation("trade")

  @@map("fiats")
}

model Feedback {
  id         String    @id @default(uuid())
  vendor     User      @relation("feedbackVendor", fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId   String    @default(uuid())
  trader     User      @relation("feedbackTrader", fields: [traderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  traderId   String    @default(uuid())
  offer      Offer     @relation("feedbackOffer", fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId    String    @default(uuid())
  message    String    @db.VarChar(256)
  type       String    @db.VarChar(10)
  isDeleted  Boolean?  @default(false) @db.Boolean
  whenDelete DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date

  @@map("feedbacks")
}

model Offer {
  id           String    @id @default(uuid())
  offerType    String
  pricingType  String
  listAt       Float
  limitMin     Float
  limitMax     Float
  timeLimit    Float
  tags         String[]
  label        String
  terms        String
  instructions String
  isDeleted    Boolean?  @default(false) @db.Boolean
  whenDelete   DateTime? @db.Date
  createdAt    DateTime? @default(now()) @db.Date
  updatedAt    DateTime? @updatedAt @db.Date

  vendor           User           @relation("offer", fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId         String         @default(uuid())
  cryptocurrency   Cryptocurrency @relation("offer", fields: [cryptocurrencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cryptocurrencyId String         @default(uuid())
  paymentMethod    PaymentMethod  @relation("offer", fields: [paymentMethodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentMethodId  String         @default(uuid())
  fiat             Fiat           @relation("offer", fields: [fiatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fiatId           String         @default(uuid())
  feedbacks        Feedback[]     @relation("feedbackOffer")
  trades           Trade[]        @relation("tradeOffer")

  @@map("offers")
}

model Trade {
  id               String         @id @default(uuid())
  paymentReceiptId String         @default(uuid())
  vendor           User           @relation("vendorTrade", fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId         String         @default(uuid())
  trader           User           @relation("traderTrade", fields: [traderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  traderId         String         @default(uuid())
  offer            Offer          @relation("tradeOffer", fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId          String         @default(uuid())
  cryptocurrency   Cryptocurrency @relation("trade", fields: [cryptocurrencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cryptocurrencyId String         @default(uuid())
  fiat             Fiat           @relation("trade", fields: [fiatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fiatId           String         @default(uuid())
  chat             Chat?

  cryptocurrencyAmount Float
  fiatAmount           Float
  startedAt            DateTime  @default(now())
  endedAt              DateTime?
  state                String
  paid                 Boolean?  @default(false) @db.Boolean
  isDeleted            Boolean?  @default(false) @db.Boolean
  whenDelete           DateTime? @db.Date
  createdAt            DateTime? @default(now()) @db.Date
  updatedAt            DateTime? @updatedAt @db.Date

  @@map("trades")
}

model AcceptedCryptocurrency {
  id          String @id @default(uuid())
  coingeckoId String @unique @db.VarChar(200)
  symbol      String @db.VarChar(200)
  name        String @db.VarChar(200)

  @@map("accepted_cryptocurrencies")
}

model Tier {
  id          String @id @default(uuid())
  name        String @unique
  description String
  level       Int    @unique
  tradingFee  Float
  discount    Float // Base trading fee as a decimal (e.g., 0.001 for 0.1%)
  minVolume   Float // Minimum trading volume to qualify for this tier
  users       User[]

  @@map("tiers")
}

model PremiumPurchase {
  id             String   @id @default(cuid())
  depositAddress String   @unique
  userId         String   @unique
  expectedAmount Float
  status         String // e.g., "pending", "completed", "failed"
  transactionId  String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])

  @@map("premium_purchases")
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

model KYC {
  id              String    @id @default(cuid())
  userId          String    @unique
  documentType    String // e.g., "passport", "driver_license"
  documentUrl     String // URL of the uploaded document
  selfieUrl       String // URL of the selfie for verification
  proofOfAddress  String // URL of address proof (if required)
  status          KYCStatus @default(PENDING)
  rejectionReason String? // Optional reason for rejection
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("kyc")
}

model TransactionPaymentMethod {
  id                         String        @id // ID from the payment gateway (e.g., Stripe payment method ID)
  transactionPaymentMethodId String
  userId                     Int
  user                       User          @relation(fields: [userId], references: [id])
  type                       String // e.g., 'credit_card'
  transactions               Transaction[] @relation("TransactionPaymentMethod")

  @@map("transaction_payment_method")
}

model Transaction {
  id                         String                   @id @default(cuid())
  userId                     Int
  user                       User                     @relation("TransactionUser", fields: [userId], references: [id])
  transactionPaymentMethodId String
  transactionPaymentMethod   TransactionPaymentMethod @relation("TransactionPaymentMethod", fields: [transactionPaymentMethodId], references: [id])
  amount                     Float
  currency                   String
  status                     String // e.g., 'pending', 'completed', 'failed'
  gatewayTransactionId       String? // ID from the payment gateway (e.g., Stripe charge ID)
  createdAt                  DateTime                 @default(now())
  User                       User                     @relation(fields: [userId], references: [id])

  @@map("transactions")
}
