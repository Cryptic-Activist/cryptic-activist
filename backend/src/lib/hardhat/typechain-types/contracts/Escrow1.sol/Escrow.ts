/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arbitrator"
      | "buyer"
      | "buyerCollateral"
      | "buyerDeposited"
      | "cancelTrade"
      | "confirmFiatReceived"
      | "confirmFiatSent"
      | "confirmationDeadline"
      | "confirmationDuration"
      | "cryptoAmount"
      | "depositByBuyer"
      | "depositBySeller"
      | "depositDeadline"
      | "disputeRaisedAt"
      | "disputeTimeout"
      | "escalateDispute"
      | "feeRate"
      | "fiatReceivedConfirmed"
      | "fiatSentConfirmed"
      | "initTrade"
      | "owner"
      | "platformWallet"
      | "raiseDispute"
      | "releaseTrade"
      | "renounceOwnership"
      | "resolveDispute"
      | "seller"
      | "sellerCollateral"
      | "sellerDeposited"
      | "setFeeAndWallet"
      | "tradeState"
      | "transferOwnership"
      | "updateArbitrator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitratorUpdated"
      | "Deposited"
      | "DisputeEscalated"
      | "DisputeRaised"
      | "DisputeResolved"
      | "FeeUpdated"
      | "FiatReceivedConfirmed"
      | "FiatSentConfirmed"
      | "OwnershipTransferred"
      | "TradeCancelled"
      | "TradeInitialized"
      | "TradeReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyerCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyerDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmFiatReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmFiatSent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmationDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmationDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cryptoAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositByBuyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositBySeller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeRaisedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escalateDispute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fiatReceivedConfirmed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fiatSentConfirmed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initTrade",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellerCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAndWallet",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArbitrator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyerDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmFiatReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmFiatSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmationDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmationDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cryptoAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositByBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeRaisedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escalateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fiatReceivedConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fiatSentConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAndWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradeState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArbitrator",
    data: BytesLike
  ): Result;
}

export namespace ArbitratorUpdatedEvent {
  export type InputTuple = [
    oldArbitrator: AddressLike,
    newArbitrator: AddressLike
  ];
  export type OutputTuple = [oldArbitrator: string, newArbitrator: string];
  export interface OutputObject {
    oldArbitrator: string;
    newArbitrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [party: AddressLike, amount: BigNumberish];
  export type OutputTuple = [party: string, amount: bigint];
  export interface OutputObject {
    party: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeEscalatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    tradeReleased: boolean,
    penalizedParty: BigNumberish
  ];
  export type OutputTuple = [tradeReleased: boolean, penalizedParty: bigint];
  export interface OutputObject {
    tradeReleased: boolean;
    penalizedParty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [
    newFeeRate: BigNumberish,
    newPlatformWallet: AddressLike
  ];
  export type OutputTuple = [newFeeRate: bigint, newPlatformWallet: string];
  export interface OutputObject {
    newFeeRate: bigint;
    newPlatformWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FiatReceivedConfirmedEvent {
  export type InputTuple = [seller: AddressLike];
  export type OutputTuple = [seller: string];
  export interface OutputObject {
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FiatSentConfirmedEvent {
  export type InputTuple = [buyer: AddressLike];
  export type OutputTuple = [buyer: string];
  export interface OutputObject {
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeInitializedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    seller: AddressLike,
    arbitrator: AddressLike,
    depositDeadline: BigNumberish,
    confirmationDuration: BigNumberish,
    disputeTimeout: BigNumberish,
    feeRate: BigNumberish,
    platformWallet: AddressLike
  ];
  export type OutputTuple = [
    buyer: string,
    seller: string,
    arbitrator: string,
    depositDeadline: bigint,
    confirmationDuration: bigint,
    disputeTimeout: bigint,
    feeRate: bigint,
    platformWallet: string
  ];
  export interface OutputObject {
    buyer: string;
    seller: string;
    arbitrator: string;
    depositDeadline: bigint;
    confirmationDuration: bigint;
    disputeTimeout: bigint;
    feeRate: bigint;
    platformWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeReleasedEvent {
  export type InputTuple = [
    cryptoTransferred: BigNumberish,
    buyerRefund: BigNumberish,
    sellerRefund: BigNumberish
  ];
  export type OutputTuple = [
    cryptoTransferred: bigint,
    buyerRefund: bigint,
    sellerRefund: bigint
  ];
  export interface OutputObject {
    cryptoTransferred: bigint;
    buyerRefund: bigint;
    sellerRefund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arbitrator: TypedContractMethod<[], [string], "view">;

  buyer: TypedContractMethod<[], [string], "view">;

  buyerCollateral: TypedContractMethod<[], [bigint], "view">;

  buyerDeposited: TypedContractMethod<[], [boolean], "view">;

  cancelTrade: TypedContractMethod<[], [void], "nonpayable">;

  confirmFiatReceived: TypedContractMethod<[], [void], "nonpayable">;

  confirmFiatSent: TypedContractMethod<[], [void], "nonpayable">;

  confirmationDeadline: TypedContractMethod<[], [bigint], "view">;

  confirmationDuration: TypedContractMethod<[], [bigint], "view">;

  cryptoAmount: TypedContractMethod<[], [bigint], "view">;

  depositByBuyer: TypedContractMethod<[], [void], "payable">;

  depositBySeller: TypedContractMethod<[], [void], "payable">;

  depositDeadline: TypedContractMethod<[], [bigint], "view">;

  disputeRaisedAt: TypedContractMethod<[], [bigint], "view">;

  disputeTimeout: TypedContractMethod<[], [bigint], "view">;

  escalateDispute: TypedContractMethod<[], [void], "nonpayable">;

  feeRate: TypedContractMethod<[], [bigint], "view">;

  fiatReceivedConfirmed: TypedContractMethod<[], [boolean], "view">;

  fiatSentConfirmed: TypedContractMethod<[], [boolean], "view">;

  initTrade: TypedContractMethod<
    [
      _buyer: AddressLike,
      _seller: AddressLike,
      _arbitrator: AddressLike,
      _cryptoAmount: BigNumberish,
      _buyerCollateral: BigNumberish,
      _sellerCollateral: BigNumberish,
      depositDuration: BigNumberish,
      _confirmationDuration: BigNumberish,
      _disputeTimeout: BigNumberish,
      _feeRate: BigNumberish,
      _platformWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  raiseDispute: TypedContractMethod<[], [void], "nonpayable">;

  releaseTrade: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [decision: boolean, penalizedParty: BigNumberish],
    [void],
    "nonpayable"
  >;

  seller: TypedContractMethod<[], [string], "view">;

  sellerCollateral: TypedContractMethod<[], [bigint], "view">;

  sellerDeposited: TypedContractMethod<[], [boolean], "view">;

  setFeeAndWallet: TypedContractMethod<
    [_feeRate: BigNumberish, _platformWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  tradeState: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateArbitrator: TypedContractMethod<
    [_newArbitrator: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arbitrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyerCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyerDeposited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmFiatReceived"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmFiatSent"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmationDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmationDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cryptoAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositByBuyer"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositBySeller"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeRaisedAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeTimeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "escalateDispute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fiatReceivedConfirmed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "fiatSentConfirmed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initTrade"
  ): TypedContractMethod<
    [
      _buyer: AddressLike,
      _seller: AddressLike,
      _arbitrator: AddressLike,
      _cryptoAmount: BigNumberish,
      _buyerCollateral: BigNumberish,
      _sellerCollateral: BigNumberish,
      depositDuration: BigNumberish,
      _confirmationDuration: BigNumberish,
      _disputeTimeout: BigNumberish,
      _feeRate: BigNumberish,
      _platformWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [decision: boolean, penalizedParty: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sellerCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellerDeposited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setFeeAndWallet"
  ): TypedContractMethod<
    [_feeRate: BigNumberish, _platformWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tradeState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateArbitrator"
  ): TypedContractMethod<[_newArbitrator: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ArbitratorUpdated"
  ): TypedContractEvent<
    ArbitratorUpdatedEvent.InputTuple,
    ArbitratorUpdatedEvent.OutputTuple,
    ArbitratorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeEscalated"
  ): TypedContractEvent<
    DisputeEscalatedEvent.InputTuple,
    DisputeEscalatedEvent.OutputTuple,
    DisputeEscalatedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FiatReceivedConfirmed"
  ): TypedContractEvent<
    FiatReceivedConfirmedEvent.InputTuple,
    FiatReceivedConfirmedEvent.OutputTuple,
    FiatReceivedConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "FiatSentConfirmed"
  ): TypedContractEvent<
    FiatSentConfirmedEvent.InputTuple,
    FiatSentConfirmedEvent.OutputTuple,
    FiatSentConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TradeCancelled"
  ): TypedContractEvent<
    TradeCancelledEvent.InputTuple,
    TradeCancelledEvent.OutputTuple,
    TradeCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TradeInitialized"
  ): TypedContractEvent<
    TradeInitializedEvent.InputTuple,
    TradeInitializedEvent.OutputTuple,
    TradeInitializedEvent.OutputObject
  >;
  getEvent(
    key: "TradeReleased"
  ): TypedContractEvent<
    TradeReleasedEvent.InputTuple,
    TradeReleasedEvent.OutputTuple,
    TradeReleasedEvent.OutputObject
  >;

  filters: {
    "ArbitratorUpdated(address,address)": TypedContractEvent<
      ArbitratorUpdatedEvent.InputTuple,
      ArbitratorUpdatedEvent.OutputTuple,
      ArbitratorUpdatedEvent.OutputObject
    >;
    ArbitratorUpdated: TypedContractEvent<
      ArbitratorUpdatedEvent.InputTuple,
      ArbitratorUpdatedEvent.OutputTuple,
      ArbitratorUpdatedEvent.OutputObject
    >;

    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "DisputeEscalated()": TypedContractEvent<
      DisputeEscalatedEvent.InputTuple,
      DisputeEscalatedEvent.OutputTuple,
      DisputeEscalatedEvent.OutputObject
    >;
    DisputeEscalated: TypedContractEvent<
      DisputeEscalatedEvent.InputTuple,
      DisputeEscalatedEvent.OutputTuple,
      DisputeEscalatedEvent.OutputObject
    >;

    "DisputeRaised()": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(bool,uint8)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "FeeUpdated(uint256,address)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "FiatReceivedConfirmed(address)": TypedContractEvent<
      FiatReceivedConfirmedEvent.InputTuple,
      FiatReceivedConfirmedEvent.OutputTuple,
      FiatReceivedConfirmedEvent.OutputObject
    >;
    FiatReceivedConfirmed: TypedContractEvent<
      FiatReceivedConfirmedEvent.InputTuple,
      FiatReceivedConfirmedEvent.OutputTuple,
      FiatReceivedConfirmedEvent.OutputObject
    >;

    "FiatSentConfirmed(address)": TypedContractEvent<
      FiatSentConfirmedEvent.InputTuple,
      FiatSentConfirmedEvent.OutputTuple,
      FiatSentConfirmedEvent.OutputObject
    >;
    FiatSentConfirmed: TypedContractEvent<
      FiatSentConfirmedEvent.InputTuple,
      FiatSentConfirmedEvent.OutputTuple,
      FiatSentConfirmedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TradeCancelled()": TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;
    TradeCancelled: TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;

    "TradeInitialized(address,address,address,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      TradeInitializedEvent.InputTuple,
      TradeInitializedEvent.OutputTuple,
      TradeInitializedEvent.OutputObject
    >;
    TradeInitialized: TypedContractEvent<
      TradeInitializedEvent.InputTuple,
      TradeInitializedEvent.OutputTuple,
      TradeInitializedEvent.OutputObject
    >;

    "TradeReleased(uint256,uint256,uint256)": TypedContractEvent<
      TradeReleasedEvent.InputTuple,
      TradeReleasedEvent.OutputTuple,
      TradeReleasedEvent.OutputObject
    >;
    TradeReleased: TypedContractEvent<
      TradeReleasedEvent.InputTuple,
      TradeReleasedEvent.OutputTuple,
      TradeReleasedEvent.OutputObject
    >;
  };
}
