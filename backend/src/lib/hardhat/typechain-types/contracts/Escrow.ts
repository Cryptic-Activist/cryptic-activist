/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISPUTE_PERIOD"
      | "arbitrator"
      | "buyer"
      | "buyerCollateral"
      | "cancelTrade"
      | "confirmTrade"
      | "cryptoAmount"
      | "disputeTrade"
      | "feeRate"
      | "fundTrade"
      | "getBalance"
      | "platformWallet"
      | "profitMargin"
      | "resolveDispute"
      | "seller"
      | "sellerCollateral"
      | "state"
      | "tradeDeadline"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitrationResolved"
      | "TradeCancelled"
      | "TradeCompleted"
      | "TradeConfirmed"
      | "TradeCreated"
      | "TradeDisputed"
      | "TradeFunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyerCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cryptoAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeTrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "fundTrade", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellerCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradeDeadline",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cryptoAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeDeadline",
    data: BytesLike
  ): Result;
}

export namespace ArbitrationResolvedEvent {
  export type InputTuple = [
    winner: AddressLike,
    buyerAmount: BigNumberish,
    sellerAmount: BigNumberish
  ];
  export type OutputTuple = [
    winner: string,
    buyerAmount: bigint,
    sellerAmount: bigint
  ];
  export interface OutputObject {
    winner: string;
    buyerAmount: bigint;
    sellerAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCompletedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeConfirmedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCreatedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [buyer: string, seller: string, amount: bigint];
  export interface OutputObject {
    buyer: string;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeDisputedEvent {
  export type InputTuple = [initiator: AddressLike];
  export type OutputTuple = [initiator: string];
  export interface OutputObject {
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeFundedEvent {
  export type InputTuple = [
    amount: BigNumberish,
    sellerCollateral: BigNumberish
  ];
  export type OutputTuple = [amount: bigint, sellerCollateral: bigint];
  export interface OutputObject {
    amount: bigint;
    sellerCollateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISPUTE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  arbitrator: TypedContractMethod<[], [string], "view">;

  buyer: TypedContractMethod<[], [string], "view">;

  buyerCollateral: TypedContractMethod<[], [bigint], "view">;

  cancelTrade: TypedContractMethod<[], [void], "nonpayable">;

  confirmTrade: TypedContractMethod<[], [void], "payable">;

  cryptoAmount: TypedContractMethod<[], [bigint], "view">;

  disputeTrade: TypedContractMethod<[], [void], "nonpayable">;

  feeRate: TypedContractMethod<[], [bigint], "view">;

  fundTrade: TypedContractMethod<[], [void], "payable">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  profitMargin: TypedContractMethod<[], [bigint], "view">;

  resolveDispute: TypedContractMethod<
    [buyerPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  seller: TypedContractMethod<[], [string], "view">;

  sellerCollateral: TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[], [bigint], "view">;

  tradeDeadline: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISPUTE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "arbitrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyerCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmTrade"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "cryptoAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundTrade"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "profitMargin"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<[buyerPercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sellerCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradeDeadline"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ArbitrationResolved"
  ): TypedContractEvent<
    ArbitrationResolvedEvent.InputTuple,
    ArbitrationResolvedEvent.OutputTuple,
    ArbitrationResolvedEvent.OutputObject
  >;
  getEvent(
    key: "TradeCancelled"
  ): TypedContractEvent<
    TradeCancelledEvent.InputTuple,
    TradeCancelledEvent.OutputTuple,
    TradeCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TradeCompleted"
  ): TypedContractEvent<
    TradeCompletedEvent.InputTuple,
    TradeCompletedEvent.OutputTuple,
    TradeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TradeConfirmed"
  ): TypedContractEvent<
    TradeConfirmedEvent.InputTuple,
    TradeConfirmedEvent.OutputTuple,
    TradeConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "TradeCreated"
  ): TypedContractEvent<
    TradeCreatedEvent.InputTuple,
    TradeCreatedEvent.OutputTuple,
    TradeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TradeDisputed"
  ): TypedContractEvent<
    TradeDisputedEvent.InputTuple,
    TradeDisputedEvent.OutputTuple,
    TradeDisputedEvent.OutputObject
  >;
  getEvent(
    key: "TradeFunded"
  ): TypedContractEvent<
    TradeFundedEvent.InputTuple,
    TradeFundedEvent.OutputTuple,
    TradeFundedEvent.OutputObject
  >;

  filters: {
    "ArbitrationResolved(address,uint256,uint256)": TypedContractEvent<
      ArbitrationResolvedEvent.InputTuple,
      ArbitrationResolvedEvent.OutputTuple,
      ArbitrationResolvedEvent.OutputObject
    >;
    ArbitrationResolved: TypedContractEvent<
      ArbitrationResolvedEvent.InputTuple,
      ArbitrationResolvedEvent.OutputTuple,
      ArbitrationResolvedEvent.OutputObject
    >;

    "TradeCancelled()": TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;
    TradeCancelled: TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;

    "TradeCompleted()": TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;
    TradeCompleted: TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;

    "TradeConfirmed()": TypedContractEvent<
      TradeConfirmedEvent.InputTuple,
      TradeConfirmedEvent.OutputTuple,
      TradeConfirmedEvent.OutputObject
    >;
    TradeConfirmed: TypedContractEvent<
      TradeConfirmedEvent.InputTuple,
      TradeConfirmedEvent.OutputTuple,
      TradeConfirmedEvent.OutputObject
    >;

    "TradeCreated(address,address,uint256)": TypedContractEvent<
      TradeCreatedEvent.InputTuple,
      TradeCreatedEvent.OutputTuple,
      TradeCreatedEvent.OutputObject
    >;
    TradeCreated: TypedContractEvent<
      TradeCreatedEvent.InputTuple,
      TradeCreatedEvent.OutputTuple,
      TradeCreatedEvent.OutputObject
    >;

    "TradeDisputed(address)": TypedContractEvent<
      TradeDisputedEvent.InputTuple,
      TradeDisputedEvent.OutputTuple,
      TradeDisputedEvent.OutputObject
    >;
    TradeDisputed: TypedContractEvent<
      TradeDisputedEvent.InputTuple,
      TradeDisputedEvent.OutputTuple,
      TradeDisputedEvent.OutputObject
    >;

    "TradeFunded(uint256,uint256)": TypedContractEvent<
      TradeFundedEvent.InputTuple,
      TradeFundedEvent.OutputTuple,
      TradeFundedEvent.OutputObject
    >;
    TradeFunded: TypedContractEvent<
      TradeFundedEvent.InputTuple,
      TradeFundedEvent.OutputTuple,
      TradeFundedEvent.OutputObject
    >;
  };
}
