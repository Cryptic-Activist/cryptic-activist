networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local

services:
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    env_file:
      - envs/dev.redis.env
    networks:
      - app-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    container_name: redis-commander
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: redis:6379
      REDIS_PASSWORD: root
      HTTP_USER: root
      HTTP_PASSWORD: root
    ports:
      - 8081:8081
    networks:
      - app-network

  mongodb:
    image: mongo:6-jammy
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    env_file:
      - envs/dev.mongodb.env
    restart: always
    networks:
      - app-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    env_file:
      - envs/dev.mongo-express.env
    volumes:
      - ./data:/data/db
    networks:
      - app-network
    ports:
      - "8082:8081"
    depends_on:
      - mongodb

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    env_file:
      - envs/dev.postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgAdmin4
    restart: always
    env_file:
      - envs/dev.pgAdmin.env
    ports:
      - "5050:80"
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - envs/dev.rabbitmq.env
    networks:
      - app-network
    restart: always

  hardhat-node:
    container_name: hardhat-node
    build:
      context: libraries/ethereum-smart-contracts
      dockerfile: dev.Dockerfile
    ports:
      - "8545:8545"
    networks:
      - app-network

  backend_blue:
    container_name: backend_blue
    build:
      context: backend/
      dockerfile: dev.Dockerfile
    expose:
      - "5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - envs/dev.backend.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    entrypoint: ["sh", "-c", "npm run migrate:dev && npm run dev"]
    deploy:
      resources:
        limits:
          memory: 4GB
    depends_on:
      - postgres
      - redis
      - mongodb
      - rabbitmq
      - hardhat-node

  backend_green:
    container_name: backend_green
    build:
      context: backend/
      dockerfile: dev.Dockerfile
    expose:
      - "5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - envs/dev.backend.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    entrypoint: ["sh", "-c", "npm run migrate:dev && npm run dev"]
    deploy:
      resources:
        limits:
          memory: 4GB
    depends_on:
      - postgres
      - redis
      - mongodb
      - rabbitmq
      - hardhat-node

  frontend-public_blue:
    container_name: public_blue
    build:
      context: frontend/public/
      dockerfile: dev.Dockerfile
    expose:
      - "3000"
    env_file:
      - envs/dev.frontend-public.env
    volumes:
      - ./frontend/public:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend_blue

  frontend-public_green:
    container_name: public_green
    build:
      context: frontend/public/
      dockerfile: dev.Dockerfile
    expose:
      - "3000"
    env_file:
      - envs/dev.frontend-public.env
    volumes:
      - ./frontend/public:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend_green

  frontend-admin_blue:
    container_name: admin_blue
    build:
      context: frontend/admin/
      dockerfile: dev.Dockerfile
    expose:
      - "3001"
    env_file:
      - envs/dev.frontend-admin.env
    volumes:
      - ./frontend/admin:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend_blue

  frontend-admin_green:
    container_name: admin_green
    build:
      context: frontend/admin/
      dockerfile: dev.Dockerfile
    expose:
      - "3001"
    env_file:
      - envs/dev.frontend-admin.env
    volumes:
      - ./frontend/admin:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend_green

  nginx:
    container_name: nginx
    build:
      context: nginx/
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - envs/dev.nginx.env
    networks:
      - app-network