networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local

services:
  postgres:
    image: postgres:latest
    restart: always
    env_file:
      - envs/dev.postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgAdmin4
    restart: always
    env_file:
      - envs/dev.pgAdmin.env
    ports:
      - "5050:80"
    networks:
      - app-network

  backend:
    build:
      context: backend/
      dockerfile: dev.Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./libraries/base-ca:/app/libraries/base-ca
      - ./libraries/cryptic-utils:/app/libraries/cryptic-utils
    env_file:
      - envs/dev.backend.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    entrypoint: ["sh", "-c", "npm run bootstrap && npm run migrate:dev && npm run dev"]
    deploy:
      resources:
        limits:
          memory: 4GB
    depends_on:
      - postgres


  frontend-public:
    build:
      context: frontend/public/
      dockerfile: dev.Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - envs/dev.frontend-public.env
    volumes:
      - ./frontend/public:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend

  frontend-admin:
    build:
      context: frontend/admin/
      dockerfile: dev.Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - envs/dev.frontend-admin.env
    volumes:
      - ./frontend/admin:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend
