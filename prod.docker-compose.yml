networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  backend-uploads:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local


services:
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes
    profiles:
      - prod
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    env_file:
      - envs/prod.redis.env
    networks:
      - app-network

  mongodb:
    image: mongo:6-jammy
    container_name: mongodb
    profiles:
      - prod
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    env_file:
      - envs/prod.mongodb.env
    restart: always
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    profiles:
      - prod
    restart: always
    env_file:
      - envs/prod.postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  postgres-backup:
    image: postgres:latest
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mkdir -p /backups &&
       pg_dump -h postgres -U ${POSTGRES_USER} ${POSTGRES_DB} > /backups/backup_$(date +%F).sql"
    volumes:
      - ./backups:/backups
    env_file:
      - envs/prod.postgres.env
    depends_on:
      - postgres
    networks:
      - app-network
    profiles:
      - backup


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
    env_file:
      - envs/prod.rabbitmq.env
    networks:
      - app-network
    restart: always

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: backend/prod.Dockerfile
      target: production
    restart: always
    profiles:
      - prod
    ports:
      - "5000:5000"
    env_file:
      - envs/prod.backend.env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=8192
    networks:
      - app-network
    depends_on:
      - postgres


  frontend-public:
    container_name: public
    build:
      context: .
      dockerfile: frontend/public/prod.Dockerfile
    restart: always
    profiles:
      - prod
    ports:
      - "3000:3000"
    env_file:
      - envs/prod.frontend-public.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend

  frontend-admin:
    container_name: admin
    build:
      context: .
      dockerfile: frontend/admin/prod.Dockerfile
    restart: always
    profiles:
      - prod
    ports:
      - "3001:3001"
    env_file:
      - envs/prod.frontend-admin.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend

  nginx:
    container_name: nginx
    build: 
      context: nginx/
      dockerfile: Dockerfile
    profiles:
      - nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - envs/prod.nginx.env
    networks:
      - app-network
