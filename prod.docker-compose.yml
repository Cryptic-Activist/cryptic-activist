networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  backend-uploads:
    driver: local

services:
  # pgadmin4:
  #   image: dpage/pgadmin4
  #   container_name: pgAdmin4
  #   restart: always
  #   env_file:
  #     - envs/pgAdmin.env
  #   ports:
  #     - "5050:80"
  #   networks:
  #     - app-network

  # postgres:
  #   image: postgres:latest
  #   container_name: postgres
  #   restart: always
  #   env_file:
  #     - envs/postgres.env
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - app-network

  api:
    build:
      context: .
      dockerfile: ./apps/api/prod.Dockerfile
    restart: always
    ports:
      - "5000:5000"
    volumes:
      - backend-uploads:/app/uploads
    env_file:
      - envs/api.env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    # depends_on:
    #   - postgres


  public:
    build:
      context: .
      dockerfile: ./apps/public/prod.Dockerfile
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - envs/public.env
    networks:
      - app-network
    # depends_on:
    #   - api

  admin:
    build:
      context: .
      dockerfile: ./apps/admin/prod.Dockerfile
    restart: always
    ports:
      - "3001:3000"
    env_file:
      - envs/admin.env
    networks:
      - app-network
    # depends_on:
    #   - api

  # nginx:
  #   image: nginx:alpine
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - app-network
  #   depends_on:
  #     - backend
  #     - frontend-public
  #     - frontend-admin
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 512MB
  #         cpus: '0.5'