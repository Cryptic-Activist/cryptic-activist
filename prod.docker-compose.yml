networks:
  app-network:
    driver: bridge

volumes:
  backend-uploads:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local

services:
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    env_file:
      - envs/prod.redis.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:6-jammy
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    env_file:
      - envs/prod.mongodb.env
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
    env_file:
      - envs/prod.rabbitmq.env
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  backend_blue:
    container_name: backend_blue
    build:
      context: .
      dockerfile: backend/prod.Dockerfile
      target: production
    restart: always
    profiles:
      - blue
    ports:
      - "5000:5000"
    env_file:
      - envs/prod.backend.env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=8192
    networks:
      - app-network
    depends_on:
      - redis
      - mongodb
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend_green:
    container_name: backend_green
    build:
      context: .
      dockerfile: backend/prod.Dockerfile
      target: production
    restart: always
    profiles:
      - green
    ports:
      - "5000:5000"
    env_file:
      - envs/prod.backend.env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=8192
    networks:
      - app-network
    depends_on:
      - redis
      - mongodb
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-public_blue:
    container_name: public_blue
    build:
      context: .
      dockerfile: frontend/public/prod.Dockerfile
    restart: always
    profiles:
      - blue
    ports:
      - "3000:3000"
    env_file:
      - envs/prod.frontend-public.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_blue
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend-public_green:
    container_name: public_green
    build:
      context: .
      dockerfile: frontend/public/prod.Dockerfile
    restart: always
    profiles:
      - green
    ports:
      - "3000:3000"
    env_file:
      - envs/prod.frontend-public.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_green
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend-admin_blue:
    container_name: admin_blue
    build:
      context: .
      dockerfile: frontend/admin/prod.Dockerfile
    restart: always
    profiles:
      - blue
    ports:
      - "3001:3001"
    env_file:
      - envs/prod.frontend-admin.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_blue
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend-admin_green:
    container_name: admin_green
    build:
      context: .
      dockerfile: frontend/admin/prod.Dockerfile
    restart: always
    profiles:
      - green
    ports:
      - "3001:3001"
    env_file:
      - envs/prod.frontend-admin.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_green
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx_blue:
    container_name: nginx_blue
    build:
      context: nginx/
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.blue.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    profiles:
      - blue
    depends_on:
      - frontend-public_blue
      - frontend-admin_blue
      - backend_blue
      # frontend-public_blue:
      #   condition: service_healthy
      # frontend-admin_blue:
      #   condition: service_healthy
      # backend_blue:
      #   condition: service_healthy

  nginx_green:
    container_name: nginx_green
    build:
      context: nginx/
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.green.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    profiles:
      - green
    depends_on:
      - frontend-public_green
      - frontend-admin_green
      - backend_green