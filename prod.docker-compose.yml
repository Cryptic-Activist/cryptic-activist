networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  backend-uploads:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local

services:
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    env_file:
      - envs/prod.redis.env
    networks:
      - app-network

  mongodb:
    image: mongo:6-jammy
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    env_file:
      - envs/prod.mongodb.env
    restart: always
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    env_file:
      - envs/prod.postgres.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
    env_file:
      - envs/prod.rabbitmq.env
    networks:
      - app-network
    restart: always

  backend_blue:
    container_name: backend_blue
    build:
      context: .
      dockerfile: backend/prod.Dockerfile
      target: production
    restart: always
    profiles:
      - blue
    expose:
      - "5000"
    env_file:
      - envs/prod.backend.env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=8192
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - mongodb
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend_green:
    container_name: backend_green
    build:
      context: .
      dockerfile: backend/prod.Dockerfile
      target: production
    restart: always
    profiles:
      - green
    expose:
      - "5000"
    env_file:
      - envs/prod.backend.env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=8192
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - mongodb
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-public_blue:
    container_name: public_blue
    build:
      context: .
      dockerfile: frontend/public/prod.Dockerfile
    restart: always
    profiles:
      - blue
    expose:
      - "3000"
    env_file:
      - envs/prod.frontend-public.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_blue

  frontend-public_green:
    container_name: public_green
    build:
      context: .
      dockerfile: frontend/public/prod.Dockerfile
    restart: always
    profiles:
      - green
    expose:
      - "3000"
    env_file:
      - envs/prod.frontend-public.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_green

  frontend-admin_blue:
    container_name: admin_blue
    build:
      context: .
      dockerfile: frontend/admin/prod.Dockerfile
    restart: always
    profiles:
      - blue
    expose:
      - "3001"
    env_file:
      - envs/prod.frontend-admin.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_blue

  frontend-admin_green:
    container_name: admin_green
    build:
      context: .
      dockerfile: frontend/admin/prod.Dockerfile
    restart: always
    profiles:
      - green
    expose:
      - "3001"
    env_file:
      - envs/prod.frontend-admin.env
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
    networks:
      - app-network
    depends_on:
      - backend_green

  nginx:
    container_name: nginx
    build:
      context: nginx/
      dockerfile: Dockerfile
    volumes:
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - envs/prod.nginx.env
    networks:
      - app-network